/*
 * Paged
 *
 * Handles CRUD operations for events
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package handlers

import (
	"errors"
	"net/http"

	"github.com/tuuturu/pager-event-service/pkg/core/models"

	"github.com/tuuturu/pager-event-service/pkg/core"

	"github.com/gin-gonic/gin"
)

// DeleteEvent -
func DeleteEvent(storage core.StorageClient) gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")

		err := storage.DeleteEvent(id)
		if err != nil {
			switch {
			case errors.Is(core.StorageErrorNotFound, err):
				c.AbortWithStatus(http.StatusNotFound)
			default:
				c.AbortWithStatus(http.StatusInternalServerError)
			}

			return
		}

		c.Status(http.StatusNoContent)
	}
}

// GetEvent -
func GetEvent(storage core.StorageClient) gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")

		result, err := storage.GetEvent(id)
		if err != nil {
			switch {
			case errors.Is(core.StorageErrorNotFound, err):
				c.AbortWithStatus(http.StatusNotFound)
			default:
				c.AbortWithStatus(http.StatusInternalServerError)
			}

			return
		}

		c.JSON(http.StatusOK, result)
	}
}

// UpdateEvent -
func UpdateEvent(storage core.StorageClient) gin.HandlerFunc {
	return func(c *gin.Context) {
		id := c.Param("id")
		update := models.Event{}

		err := c.Bind(&update)
		if err != nil {
			c.AbortWithStatus(http.StatusBadRequest)

			return
		}

		update.Id = id

		result, err := storage.UpdateEvent(&update)
		if err != nil {
			switch {
			case errors.Is(core.StorageErrorNotFound, err):
				c.AbortWithStatus(http.StatusNotFound)
			default:
				c.AbortWithStatus(http.StatusInternalServerError)
			}

			return
		}

		c.JSON(http.StatusOK, result)
	}
}
